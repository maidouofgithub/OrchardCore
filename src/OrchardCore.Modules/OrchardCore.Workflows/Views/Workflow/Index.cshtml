@model WorkflowIndexViewModel
@using OrchardCore.Workflows.Models;
@using OrchardCore.Workflows.ViewModels;

@{
    int startIndex = (Model.Pager.Page - 1) * (Model.Pager.PageSize) + 1;
    int endIndex = startIndex + Model.Workflows.Count - 1;
}
<script asp-name="bootstrap-select" depends-on="admin" at="Foot"></script>
<style asp-name="bootstrap-select"></style>

<h1>@RenderTitleSegments(T["{0} Workflows", Model.WorkflowType.Name])</h1>
<zone name="Breadcrumbs">
    <nav aria-label="breadcrumb">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a asp-action="Index" asp-controller="WorkflowType">@T["Workflow Types"]</a></li>
            <li class="breadcrumb-item"><a asp-action="Edit" asp-controller="WorkflowType" asp-route-id="@Model.WorkflowType.Id">@Model.WorkflowType.Name</a></li>
            <li class="breadcrumb-item active" aria-current="page">@T["Workflows"]</li>
        </ol>
    </nav>
</zone>

<form asp-action="Index" id="workflows-form" method="post">
    <input type="submit" name="submit.Filter" id="submitFilter" class="d-none" />
    <input type="submit" name="submit.BulkAction" class="d-none" />
    <input asp-for="Options.BulkAction" type="hidden" />

    <div class="form-group">
        <ul class="list-group">
            <li class="list-group-item bg-light">
                <div class="row">
                    <div class="form-group col-xl-4 mb-xl-n1">
                        <div class="custom-control custom-checkbox mt-2 mr-n2">
                            <input type="checkbox" class="custom-control-input" id="select-all">
                            <label class="custom-control-label" for="select-all" id="select-all-label" title="@T["Select All"]"></label>
                            <label id="items" for="select-all">@T.Plural(Model.Workflows.Count, "1 item", "{0} items")<span class="text-muted" title="@T["Items {0} to {1}", startIndex, endIndex]">@T.Plural((int)Model.Pager.TotalItemCount, " / {0} item in total", " / {0} items in total")</span></label>
                            <label id="selected-items" class="text-muted" for="select-all"></label>
                        </div>
                    </div>
                    <div class="col-xl-4 mb-xl-n1">
                        <span class="dropdown" id="actions" style="display:none">
                            <button class="btn btn-light dropdown-toggle" type="button" id="bulk-action-menu-button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                @T["Actions"]
                            </button>
                            <span class="dropdown-menu dropdown-menu-right" aria-labelledby="bulk-action-menu-button">
                                @foreach (var item in Model.Options.WorkflowsBulkAction)
                                {
                                    <a class="dropdown-item" href="javascript:void(0)" data-action="@item.Value" data-title="@T["Bulk Action"]" data-message="@T["Are you sure you want to {0} these items?", @item.Text.ToLower()]">@item.Text</a>
                                }
                            </span>
                        </span>
                    </div>
                    <div class="col-3"></div>
                    <div class="form-group col-xl-1 mb-xl-n1 filter">
                        <div class="float-xl-right">
                            <select asp-for="Options.Filter" asp-items="Model.Options.WorkflowsStatuses" class="selectpicker show-tick" data-header="@T["Filter by status"]" data-live-search="true" data-selected-text-format="static" data-dropdown-align-right="auto" data-width="fit" title="@T["Status"]">
                            </select>
                        </div>
                    </div>
                </div>
            </li>
            @if (Model.Workflows.Any())
            {
                @for (var i = 0; i < Model.Workflows.Count; i++)
                {
                    var entry = Model.Workflows[i];
                    var statusCss = "";

                    switch (entry.Workflow.Status)
                    {
                        case WorkflowStatus.Aborted:
                            statusCss = "warning";
                            break;
                        case WorkflowStatus.Idle:
                        default:
                            statusCss = "secondary";
                            break;
                        case WorkflowStatus.Finished:
                            statusCss = "success";
                            break;
                        case WorkflowStatus.Executing:
                        case WorkflowStatus.Halted:
                        case WorkflowStatus.Resuming:
                        case WorkflowStatus.Starting:
                            statusCss = "info";
                            break;
                        case WorkflowStatus.Faulted:
                            statusCss = "danger";
                            break;
                    }

                    <li class="list-group-item">
                        <div class="properties">
                            <div class="related">
                                <a asp-action="Delete" asp-route-id="@entry.Workflow.Id" class="btn btn-danger btn-sm" itemprop="RemoveUrl UnsafeUrl">@T["Delete"]</a>
                            </div>

                            <div class="custom-control custom-checkbox float-left">
                                <input type="checkbox" class="custom-control-input" value="@entry.Workflow.Id" name="itemIds" id="itemIds-@entry.Workflow.Id">
                                <label class="custom-control-label" for="itemIds-@entry.Workflow.Id">&nbsp;</label>
                            </div>
                            <a asp-action="Details" asp-route-id="@entry.Workflow.Id">@entry.Workflow.WorkflowId</a>
                            <div>
                                <span class="hint">@T["Created {0}", (object)(await DisplayAsync(await New.TimeSpan(Utc: entry.Workflow.CreatedUtc)))]</span>
                                <div class="info">
                                    <span class="badge badge-@statusCss">
                                        @switch (entry.Workflow.Status)
                                        {
                                            case WorkflowStatus.Idle:
                                                @T["Idle"]
                                                break;
                                            case WorkflowStatus.Starting:
                                                @T["Starting"]
                                                break;
                                            case WorkflowStatus.Resuming:
                                                @T["Resuming"]
                                                break;
                                            case WorkflowStatus.Executing:
                                                @T["Executing"]
                                                break;
                                            case WorkflowStatus.Halted:
                                                @T["Halted"]
                                                break;
                                            case WorkflowStatus.Finished:
                                                @T["Finished"]
                                                break;
                                            case WorkflowStatus.Faulted:
                                                @T["Faulted"]
                                                break;
                                            case WorkflowStatus.Aborted:
                                                @T["Aborted"]
                                                break;
                                            default:
                                                @entry.Workflow.Status
                                                break;
                                        }
                                    </span>
                                </div>
                            </div>
                        </div>
                    </li>
                } 
            }
            else
            {
                <li class="list-group-item">
                    <div class="alert alert-info" role="alert">
                        @T["<strong>Nothing here!</strong> There are no halted workflows at the moment."]
                    </div>
                </li>
            }
        </ul>
        @await DisplayAsync(Model.Pager)
    </div>
</form>

<div class="form-group">
    <a class="btn btn-secondary" href="@Model.ReturnUrl">@T["Back"]</a>
</div>

<script at="Foot" type="text/javascript">
    $(function () {
        $('select').selectpicker();

        var actions = $("#actions");
        var items = $("#items");
        var filters = $(".filter");
        var selectAllCtrl = $("#select-all");
        var selectedItems = $("#selected-items");
        var itemsCheckboxes = $(":checkbox[name='itemIds']");

        $(".filter-options input").on("change", function () {
            $("[name='submit.Filter']").click();
        });
        
        $('select').on('changed.bs.select', function (e, clickedIndex, isSelected, previousValue) {
            $("[name='submit.Filter']").click();
        });

        $(".dropdown-menu .dropdown-item").on("click", function () {
            if ($(":checkbox[name='itemIds']:checked").length > 1) {
                var $this = $(this);
                confirmDialog({title: $this.data('title'), message: $this.data('message'), callback: function(r) {
                    if (r) {
                        $("[name='Options.BulkAction']").val($this.data("action"));
                        $("[name='submit.BulkAction']").click();
                    }
                }});
            }
        });

        function displayActionsOrFilters() {
            if ($(":checkbox[name='itemIds']:checked").length > 1) {
                actions.show();
                filters.hide();
                selectedItems.show();
                items.hide();
            }
            else {
                actions.hide();
                filters.show();
                selectedItems.hide();
                items.show();
            }
        }

        selectAllCtrl.click(function(){
            itemsCheckboxes.not(this).prop("checked", this.checked);
            selectedItems.text($(":checkbox[name='itemIds']:checked").length + ' @T["selected"]');
            displayActionsOrFilters();
        });

        itemsCheckboxes.on("click", function () {
            selectedItems.text($(":checkbox[name='itemIds']:checked").length + ' @T["selected"]');
            displayActionsOrFilters();
        });
    });
</script>
